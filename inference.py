
import argparse
import numpy as np
import torch


from models.networks import define_G
from data.base_dataset import get_transform
from util.util import tensor2im

# TODO:
def set_opt():
    opt = argparse.Namespace()
    opt.input_nc = 3
    opt.output_nc = 3
    opt.ngf = 64
    opt.gpu_ids = [1]
    opt.isTrain = False
    opt.checkpoints_dir = "./checkpoints/aicha/"
    opt.name = "3dhtoleica"
    opt.batchSize = 2
    opt.fineSize = 256
    opt.which_model_netG = "basic"
    opt.which_model_netG = "resnet_9blocks"
    opt.which_model_netD = "basic"
    opt.norm = "instance"
    opt.no_dropout = False
    opt.init_type = "normal"
    opt.which_epoch = "latest"
    opt.no_lsgan = False
    opt.ndf = 64
    opt.continue_train = False
    opt.n_layers_D = 3
    opt.lr = 0.005
    opt.pool_size = 50
    opt.aicha_loss = False
    opt.beta1 = 0.001
    opt.lr_policy = "lambda"
    opt.epoch_count = 2
    opt.niter = 2
    opt.niter_decay = 100
    opt.dataset_mode = "unaligned"
    opt.dataroot = "data/images"
    opt.phaseA = "3dh"
    opt.phaseB = "leica"
    opt.resize_or_crop = "resize_or_crop"
    opt.serial_batches = False
    opt.no_flip = False
    opt.nThreads = 2
    opt.which_direction = "AtoB"
    opt.max_dataset_size = 3

    return opt


OPT = set_opt()

class StainGAN:
    """Example
    # init StainGAN
    >>> from inference import StainGAN
    >>> params = torch.load("/home/heon/repositories/StainGAN/checkpoints/aicha/3dhtoleica/latest_net_G_A.pth")
    >>> stain_gan = StainGAN(params, device="cuda:1")

    # Forward
    >>> from PIL import Image
    >>> import numpy as np
    >>> image = Image.open("/vast/AI_team/heon/inhouse_tiling_3dh/train/malignant/2023S 0024731020102/2023S 0024731020102_67584_178176_69632_180224.jpg")
    >>> res = stain_gan.transform(np.array(image))
    >>> plt.imshow(res)
    """

    def __init__(self, params, device):
        """
        Initialize the StainGAN model.

        Args:
            params (dict): Dictionary containing the parameters of the model.
            device (torch.device): Device to use for computation (e.g., 'cpu', 'cuda').

        Returns:
            None
        """
        self.model = self._build_model()
        self.device = device

        self.model.to(device)
        self.model.eval()
        self.model.load_state_dict(params)        
        

    def _build_model(self):
        return define_G(OPT.input_nc,
            OPT.output_nc,
            OPT.ngf,
            OPT.which_model_netG,
            OPT.norm,
            not OPT.no_dropout,
            OPT.init_type,
            OPT.gpu_ids
        )

    
    def transform(self, x:np.ndarray) -> np.ndarray:
        """
        Transform input image(s) using the StainGAN model.

        Args:
            x (np.ndarray): Input image(s) to be transformed.

        Returns:
            np.ndarray: Transformed image(s) generated by the StainGAN model.
        """

        if not hasattr(self, "preprocess"):
            self.preprocess = get_transform(OPT)
            
        with torch.no_grad():
            x = self.preprocess(x)
            x = x.to(self.device)
            generative_image:torch.Tensor = self.model(x)
        
        return tensor2im(generative_image.detach().cpu().unsqueeze(0))